const m='{% block sw_text_filter %} <div class="sw-existence-filter"> <sw-base-filter :title="filter.label" :show-reset-button="!!value" :active="active" @filter-reset="resetFilter" > {% block sw_text_filter_content %} <sw-text-field :placeholder="filter.placeholder" :value="value" @update:value="changeValue" /> {% endblock %} </sw-base-filter> </div> {% endblock %}',{Component:x}=Shopware,{Criteria:h}=Shopware.Data;x.register("sw-text-filter",{template:m,props:{filter:{type:Object,required:!0},active:{type:Boolean,required:!0}},computed:{value(){return this.filter.value}},methods:{changeValue(e){if(!e){this.resetFilter();return}const t=this.filter.property.concat(this.filter.schema?`.${this.filter.schema.localField}`:"");let a=[h.contains(t,e)];this.$emit("filter-update",this.filter.name,a,e)},resetFilter(){this.$emit("filter-reset",this.filter.name)}}});const f=`{% block sw_filter_panel_item %} <div v-for="filter in listFilters" :id="filter.name" :key="filter.name" class="sw-filter-panel__item" > <div v-if="false"></div> <sw-text-filter v-else-if="showFilter(filter, 'text-filter')" :filter="filter" :active="!!activeFilters[filter.name]" @filter-update="updateFilter" @filter-reset="resetFilter" /> </div> {% parent %} {% endblock %}`;Shopware.Component.override("sw-filter-panel",{template:f});const w='{% block sw_order_detail_base_line_items_summary_taxes %} <template v-if="taxStatus !== \'tax-free\'"> <template v-for="(calculatedTax, index) in sortedCalculatedTaxes"> <dt :key="`sorted-calculated-taxes-dt-${index}`"> {{ $tc(\'sw-order.detailBase.summaryLabelTaxes\', 1, { taxRate: getTaxRate(calculatedTax.tax) }) }} </dt> <dd :key="`sorted-calculated-taxes-dd-${index}`"> {{ calculatedTax.tax | currency(order.currency.translated.shortName) }} </dd> </template> </template> {% endblock %}';Shopware.Component.override("sw-order-detail-base",{template:w,methods:{getTaxRate(e){return parseFloat(e*100/this.order.amountNet).toFixed(2)}}});const b='{% block sw_settings_tax_detail_content_card %} {% parent %} <div class="sw-card"> <div class="sw-card__content"> <div class="sw-container" style="grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 0px 30px; place-items: stretch;"> <div class="sw-field sw-block-field sw-contextual-field sw-field--text is--disabled sw-field--default"> {% block sw_settings_tax_service_provider_card %} <sw-tax-provider-card v-if="tax.id" :disabled="!taxId" class="sw-settings-tax-detail__tax-rule-grid" :tax="tax" :is-loading="isLoading" /> {% endblock %} </div> </div> </div> <div></div> </div> {% endblock %}';Shopware.Component.override("sw-settings-tax-detail",{template:b});const v=`{% block sw_settings_tax_provider_card %} <sw-container columns="1fr 1fr" gap="0px 32px" > {% block sw_settings_tax_provider_card_type_select %} <sw-entity-single-select v-model:value="taxProvider.id" show-clearable-button :label="$tc('sw-override-settings-tax.taxProvider.cardTitle')" label-property="name" :criteria="taxProviderCriteria" entity="s25_tax_service_provider" @update:value="changeTaxProvider" /> {% endblock %} </sw-container> {% endblock %}`,{Component:_,Context:d}=Shopware,{Criteria:y}=Shopware.Data;_.register("sw-tax-provider-card",{template:v,inject:["repositoryFactory"],props:{tax:{type:Object,required:!0}},data(){return{taxProvider:null,currentTaxProvider:null}},computed:{taxRepository(){return this.repositoryFactory.create("tax")},taxProviderRepository(){return this.repositoryFactory.create("s25_tax_service_provider")},taxMappingRepository(){return this.repositoryFactory.create("s25_tax_provider")},taxProviderCriteria(){return new y}},created(){this.createdComponent()},methods:{changeTaxProvider(e){this.taxProviderRepository.get(e,d.api).then(t=>{this.currentTaxProvider=t,this.currentTaxProvider?(this.taxExtension=this.taxMappingRepository.create(Shopware.Context.api),this.tax.extensions.taxExtension?(this.taxExtension.taxId=this.tax.id,this.taxExtension.providerId=this.currentTaxProvider.id,this.taxMappingRepository.delete(this.tax.extensions.taxExtension.id).then(()=>{}),this.taxMappingRepository.save(this.taxExtension).then(()=>{})):(this.taxExtension.taxId=this.tax.id,this.taxExtension.providerId=this.currentTaxProvider.id,this.taxMappingRepository.save(this.taxExtension).then(()=>{}))):this.taxMappingRepository.delete(this.tax.extensions.taxExtension.id,d.api).then(()=>{})})},createdComponent(){this.currentTaxProvider?(this.taxProvider=this.currentTaxProvider,this.taxProvider.id&&this.changeTaxProvider(this.taxProvider.id)):(this.taxProvider=this.taxProviderRepository.create(),this.taxProvider.taxId=this.tax.id,this.tax.extensions.taxExtension&&(this.taxProvider.id=this.tax.extensions.taxExtension.providerId))}}});const C=`{% block sw_settings_taxjar_index %} <sw-page class="sw-settings-taxjar"> {% block sw_settings_taxjar_search_bar %} <template #search-bar> <sw-search-bar /> </template> {% endblock %} {% block sw_settings_taxjar_smart_bar_header %} <template #smart-bar-header> {% block sw_settings_taxjar_smart_bar_header_title %} <span class="h2"> {% block sw_settings_taxjar_smart_bar_header_title_text %} {{ $tc('sw-settings.index.title') }} <sw-icon name="regular-chevron-right-xs" small /> {{ $tc('sw-settings-taxjar.general.textHeadline') }} {% endblock %} </span> {% endblock %} </template> {% endblock %} {% block sw_settings_taxjar_smart_bar_actions %} <template #smart-bar-actions> {% block sw_settings_tax_actions_save %} <sw-button-process class="sw-settings-login-registration__save-action" :is-loading="isLoading || systemConfigLoading" :process-success="isSaveSuccessful" :disabled="isLoading || systemConfigLoading" variant="primary" @update:process-success="saveFinish" @click="onSave" > {{ $tc('sw-settings-taxjar.general.buttonSave') }} </sw-button-process> {% endblock %} {% block sw_settings_tax_actions_log %} <sw-button class="sw-settings-tax__log-action" variant="primary" :is-loading="isLoading" :disabled="isLoading" :router-link="{ name: 'sw.tax.log.module.list' }" > {{ $tc('sw-settings-taxjar.general.buttonLog') }} </sw-button> {% endblock %} {% block sw_settings_test_tax_jar_connection %} <sw-button class="sw-settings-tax-connection__test-action" variant="primary" :is-loading="isLoading" :disabled="isLoading" @click="testConnection" > {{ $tc('sw-settings-taxjar.general.testButtonLabel') }} </sw-button> {% endblock %} </template> {% endblock %} {% block sw_settings_taxjar_content %} <template #content> <sw-card-view> <sw-skeleton v-if="isLoading" /> <sw-system-config v-show="!isLoading" ref="systemConfig" sales-channel-switchable domain="solu1TaxJar.setting" @loading-changed="onLoadingChanged" /> </sw-card-view> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:S,Mixin:k}=Shopware;S.register("sw-settings-taxjar",{template:C,mixins:[k.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},metaInfo(){return{title:this.$createTitle()}},methods:{saveFinish(){this.isSaveSuccessful=!1},basicHeaders(){return{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Service("loginService").getToken()}`}},testConnection(){let e=this.$refs.systemConfig.actualConfigData[null],a=Shopware.Context.api.basePath+"/api/_action/tax-jar/test-connection",i=e["solu1TaxJar.setting.liveApiToken"];e["solu1TaxJar.setting.selectedCommitFlows"],e["solu1TaxJar.setting.sandboxMode"]&&(i=e["solu1TaxJar.setting.sandboxApiToken"]);let s=JSON.stringify({token:i,sandbox:e["solu1TaxJar.setting.sandboxMode"],from_country:e["solu1TaxJar.setting.shippingFromCountry"],from_zip:e["solu1TaxJar.setting.shippingFromZip"],from_state:e["solu1TaxJar.setting.shippingFromState"],from_city:e["solu1TaxJar.setting.shippingFromCity"],from_street:e["solu1TaxJar.setting.shippingFromStreet"],selectedCommitFlows:e["solu1TaxJar.setting.selectedCommitFlows"]}),l={method:"POST",headers:this.basicHeaders(),body:s,redirect:"follow"};fetch(a,l).then(r=>r.json()).then(r=>{try{if(r.error){let o=r.detail;o=o.replace(/from_street/g,"Shipping From Street").replace(/from_country/g,"Shipping From Country").replace(/from_zip/g,"Shipping From ZipCode").replace(/from_state/g,"Shipping From State Code").replace(/from_city/g,"Shipping From City"),o.includes("Shipping From State Code")&&(o+=".Please provide valid Shipping From State Code Ex: WI for Wisconsin!"),this.createNotificationError({message:o})}else this.createNotificationSuccess({message:this.$tc("sw-settings-taxjar.testConnection.success")})}catch(o){this.createNotificationError({message:o})}}).catch(r=>{this.createNotificationError({message:r+".Please review logs for more detail!"})})},validateInput(){let e=this.$refs.systemConfig.actualConfigData[null],t=!1;return e["solu1TaxJar.setting.sandboxMode"]?e["solu1TaxJar.setting.sandboxApiToken"]||(this.createNotificationError({message:"Provide Valid Sandbox API Token"}),t=!0):e["solu1TaxJar.setting.liveApiToken"]||(this.createNotificationError({message:"Provide Valid Live API Token"}),t=!0),e["solu1TaxJar.setting.defaultProductTaxCode"]||(this.createNotificationError({message:"Provide Valid Product Tax Code"}),t=!0),e["solu1TaxJar.setting.selectedCommitFlows"]||(this.createNotificationError({message:"Commit flow should be selected"}),t=!0),e["solu1TaxJar.setting.shippingFromStreet"]||(this.createNotificationError({message:"Provide Valid Shipping From Street"}),t=!0),e["solu1TaxJar.setting.shippingFromCity"]||(this.createNotificationError({message:"Provide Valid Shipping From City"}),t=!0),e["solu1TaxJar.setting.shippingFromZip"]||(this.createNotificationError({message:"Provide Valid Shipping From Zip"}),t=!0),e["solu1TaxJar.setting.shippingFromState"]?e["solu1TaxJar.setting.shippingFromState"].length>3&&(this.createNotificationError({message:"Provide Valid Shipping From State Code Ex: WI For Wisconsin"}),t=!0):(this.createNotificationError({message:"Provide Valid Shipping From State Code"}),t=!0),e["solu1TaxJar.setting.shippingFromCountry"]||(this.createNotificationError({message:"Provide Valid Shipping From Country"}),t=!0),!t},onSave(){if(this.isSaveSuccessful=!1,!this.validateInput()){this.isLoading=!1;return}this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0}).catch(e=>{this.isLoading=!1,this.createNotificationError({message:e})})},onLoadingChanged(e){this.isLoading=e}}});const{Module:T}=Shopware;T.register("sw-settings-taxjar",{type:"core",name:"settings-taxjar",title:"Tax service provider settings",description:"Tax service provider settings",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"regular-cog",favicon:"icon-module-settings.png",routes:{index:{component:"sw-settings-taxjar",path:"index",meta:{parentPath:"sw.settings.index",privilege:"system.system_config"}}},settingsItem:{group:"shop",to:"sw.settings.taxjar.index",icon:"regular-briefcase",privilege:"system.system_config"}});const F=`{% block tax_jar_log_module_list %} <sw-page> {% block tax_jar_log_smart_bar_header %} <template #smart-bar-header> {% block tax_jar_log_list_smart_bar_header_title %} <span class="h2"> {% block emizen_module_list_smart_bar_header_title_text %} {{ $tc('sw-settings.index.title') }} <sw-icon name="small-arrow-medium-right" small></sw-icon> {{ $t('sw-tax-log-module.general.mainMenuItemList') }} {% endblock %} {% block emizen_module_list_smart_bar_header_amount %} <span v-if="total" class="sw-page__smart-bar-amount"> ({{total}}) </span> {% endblock %} </span> {% endblock %} </template> {% endblock %} <template #smart-bar-actions> {% block sw_settings_test_tax_jar_connection %} <sw-button class="sw-settings-tax-connection__test-action" variant="primary" :is-loading="isLoading" :disabled="isLoading" @click="exportLog" > {{ $tc('sw-tax-log-module.export.buttonLabel') }} </sw-button> {% endblock %} </template> <template #content> <sw-entity-listing :items="taxJarLogCollection" :repository="getRepository" :showSelection="false" :columns="getColumns"> <template slot="column-request" slot-scope="{ item }"> {{item.request}} </template> <template slot="column-response" slot-scope="{ item }"> {{item.response}} </template> </sw-entity-listing> </template> {% block wk_test_list_sidebar %} <template #sidebar> <sw-sidebar class="sw-order-list__sidebar"> {% block tax_jar_log_list_sidebar_refresh %} <sw-sidebar-item icon="regular-undo" :title="$tc('sw-order.list.titleSidebarItemRefresh')" @click="onRefresh"> </sw-sidebar-item> {% endblock %} {% block tax_jar_log_list_sidebar_filter %} <sw-sidebar-filter-panel entity="taxjar_log" :storeKey="storeKey" :filters="listFilters" :defaults="defaultFilters" :activeFilterNumber="activeFilterNumber" @criteria-changed="updateCriteria"> </sw-sidebar-filter-panel> {% endblock %} </sw-sidebar> </template> {% endblock %} </sw-page> {% endblock %}`,{Component:P,Mixin:n}=Shopware,{Criteria:c}=Shopware.Data;P.register("sw-tax-log-module-list",{template:F,inject:["repositoryFactory","filterFactory"],mixins:[n.getByName("notification"),n.getByName("listing"),n.getByName("placeholder")],metaInfo(){return{title:this.$createTitle()}},data(){return{total:0,page:1,limit:30,taxJarLogCollection:null,storeKey:"grid.filter.tax.log",repository:null,isLoading:!1,processSuccess:!1,defaultFilters:["tax-log-date-filter","tax-log-type-filter","tax-log-order-number-filter","tax-log-order-id-filter","tax-log-customer-name-filter","tax-log-customer-email-filter","tax-log-customer-ip-filter","tax-log-request-filter","tax-log-response-filter"],activeFilterNumber:0,filterCriteria:[]}},created(){},computed:{getRepository(){return this.repositoryFactory.create("s25_taxjar_log")},getColumns(){return this.getColumnsList()},listFilters(){return this.filterFactory.create("s25_taxjar_log",{"tax-log-date-filter":{property:"createdAt",dateType:"datetime-local",label:"Creation Time",placeholder:"Creation Time",showTimeframe:!0},"tax-log-type-filter":{property:"type",label:"Request Type",type:"text-filter",placeholder:"Request Type"},"tax-log-order-number-filter":{property:"orderNumber",label:"Order Number",type:"text-filter",placeholder:"Order Number"},"tax-log-order-id-filter":{property:"orderId",label:"Order Id",type:"text-filter",placeholder:"Order Id"},"tax-log-customer-name-filter":{property:"customerName",label:"Customer Name",type:"text-filter",placeholder:"Customer Name"},"tax-log-customer-email-filter":{property:"customerEmail",label:"Customer Email",type:"text-filter",placeholder:"Customer Email"},"tax-log-customer-ip-filter":{property:"remoteIp",label:"Customer IP",type:"text-filter",placeholder:"Customer IP"},"tax-log-request-filter":{property:"request",label:"Request",type:"text-filter",placeholder:"Request"},"tax-log-response-filter":{property:"response",type:"text-filter",label:"Response",placeholder:"Response"}})},defaultCriteria(){const e=new c(this.page,this.limit);return e.setTerm(this.term),e.addSorting(c.sort("createdAt","DESC")),this.filterCriteria.forEach(t=>{e.addFilter(t)}),e}},watch:{defaultCriteria:{handler(){this.getList()},deep:!0}},methods:{basicHeaders(){return{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Service("loginService").getToken()}`}},exportLog(){let e={method:"GET",headers:this.basicHeaders(),redirect:"follow"},a=Shopware.Context.api.basePath+"/api/_action/tax-jar/export-log";fetch(a,e).then(i=>i.json()).then(i=>{let s=`Customer Name,Customer Email,Customer IP,Order Number,Order Id,Request,Response,Creation Time
`;i.forEach(r=>{s+='"'+r.customerName+'",',s+='"'+r.customerEmail+'",',s+='"'+r.remoteIp+'",',s+='"'+r.orderNumber+'",',s+='"'+r.orderId+'",',s+='"'+r.request+'",',s+='"'+r.response+'",',s+=r.createdAt,s+=`
`});const l=document.createElement("a");l.href="data:text/csv;charset=utf-8,"+encodeURIComponent(s),l.target="_blank",l.download="ExportTaxJarLog.csv",l.click()}).catch(i=>{this.createNotificationError({message:i+".Please review logs for more detail!"})})},async getList(){this.isLoading=!0;const e=await Shopware.Service("filterService").mergeWithStoredFilters(this.storeKey,this.defaultCriteria);this.activeFilterNumber=e.filters.length;try{const t=await this.getRepository.search(this.defaultCriteria);this.total=t.total,this.taxJarLogCollection=t,this.isLoading=!1,this.selection={}}catch{this.isLoading=!1}},updateCriteria(e){this.page=1,this.filterCriteria=e},getColumnsList(){return[{property:"createdAt",dataIndex:"createdAt",label:"Creation Time",allowResize:!0,sortable:!0},{property:"type",dataIndex:"type",label:this.$t("sw-tax-log-module.list.requestType"),allowResize:!0,sortable:!0},{property:"orderNumber",dataIndex:"orderNumber",label:this.$t("sw-tax-log-module.list.orderNumber"),allowResize:!0,sortable:!0},{property:"orderId",dataIndex:"orderId",label:this.$t("sw-tax-log-module.list.orderId"),allowResize:!0,sortable:!0},{property:"customerName",dataIndex:"customerName",label:this.$t("sw-tax-log-module.list.customerName"),allowResize:!0,sortable:!0},{property:"customerEmail",dataIndex:"customerEmail",label:this.$t("sw-tax-log-module.list.customerEmail"),allowResize:!0,sortable:!0},{property:"remoteIp",dataIndex:"remoteIp",label:this.$t("sw-tax-log-module.list.remoteIp"),allowResize:!0,sortable:!0},{property:"request",dataIndex:"request",label:this.$t("sw-tax-log-module.list.titleColumn"),allowResize:!0,sortable:!0},{property:"response",dataIndex:"response",label:this.$t("sw-tax-log-module.list.descColumn"),allowResize:!0,sortable:!0}]}}});const{Module:N}=Shopware;N.register("sw-tax-log-module",{type:"plugin",title:"sw-tax-log-module.general.mainMenuItemList",description:"sw-tax-log-module.general.descriptionTextModule",routes:{list:{component:"sw-tax-log-module-list",path:"list",meta:{parentPath:"sw.settings.index"}}},settingsItem:[{name:"sw-tax-log-module-menu",label:"sw-tax-log-module.general.mainMenuItemList",to:"sw.tax.log.module.list",group:"plugins",icon:"regular-cog"}],navigation:[{id:"sw-tax-jar-log",label:"sw-tax-log-module.general.mainMenuItemList",color:"#ff68b4",icon:"regular-cog",path:"sw.tax.log.module.list",position:100,parent:"sw-order",privilege:"order.viewer"}]});const I=`<sw-page> <template #content> <div v-if="isLoading"> <sw-loader size="50px" /> </div> <div v-else> <sw-alert v-if="errorMessage" variant="error" :title="'Nexus Error'" :showIcon="true" class="nexus-error-alert"> {{ errorMessage }} </sw-alert> <sw-data-grid v-if="!errorMessage" :dataSource="regions" :columns="columns" :showSelection="false" :showActions="false" /> <div class="nexus-status-wrapper" v-if="!errorMessage"> <div v-if="regions.length > 0" class="success-nexus-alert"> Nexus is connected </div> <div v-else class="danger-nexus-alert"> No nexus connected </div> <p v-if="regions.length === 0" class="nexus-instruction"> Connect a nexus using TaxJar <a href="https://app.taxjar.com/dashboard" target="_blank" rel="noopener noreferrer"> dashboard </a> </p> </div> </div> </template> </sw-page>`,{Component:E,Mixin:L}=Shopware;E.register("sw-nexus-page",{template:I,inject:["nexusApiService"],mixins:[L.getByName("notification")],data(){return{isLoading:!1,regions:[],errorMessage:"",columns:[{property:"country",label:"Country"},{property:"country_code",label:"Country Code"},{property:"region",label:"Region"},{property:"region_code",label:"Region Code"}]}},methods:{errorMessage:void 0,async getData(){var e;this.isLoading=!0,this.errorMessage="";try{const t=await this.nexusApiService.getStates();if(!((e=t==null?void 0:t.data)!=null&&e.regions)){this.regions=[],this.errorMessage="No Nexus regions received. Please verify your TaxJar connection.",this.createNotificationError({title:"Nexus Error",message:this.errorMessage});return}this.regions=t.data.regions.map((a,i)=>({id:i,...a}))}catch(t){this.regions=[],this.errorMessage="Failed to load Nexus regions. Please check your API credentials or configuration.",this.createNotificationError({title:"Nexus Error",message:this.errorMessage}),console.error("[Nexus API Error]:",t)}finally{this.isLoading=!1}}},mounted(){this.getData()}});const{Module:$}=Shopware;$.register("sw-nexus-module",{type:"plugin",title:"sw-nexus-module.general.mainMenuItemList",description:"sw-nexus-module.general.descriptionTextModule",routes:{list:{component:"sw-nexus-page",path:"list",meta:{parentPath:"sw.settings.index"}}},navigation:[{id:"sw-nexus-module",label:"sw-nexus-module.general.mainMenuItemList",color:"#ff68b4",icon:"regular-cog",path:"sw.nexus.module.list",position:100,parent:"sw-order",privilege:"order.viewer"}]});const{Application:p}=Shopware,u=Shopware.Classes.ApiService;class g extends u{constructor(t,a,i="nexus"){super(t,a,i)}getStates(){return this.httpClient.get(`${this.getApiBasePath()}/states`,{headers:this.getBasicHeaders()}).then(t=>u.handleResponse(t))}}p.addServiceProvider("nexusApiService",e=>{const t=p.getContainer("init");return new g(t.httpClient,e.loginService)});Shopware.Service("nexusApiService").register("nexusApiService",g);
//# sourceMappingURL=solu1-tax-jar-CazBzTBf.js.map
