(function(){var e={748:function(){},335:function(e,t,r){var i=r(748);i.__esModule&&(i=i.default),"string"==typeof i&&(i=[[e.id,i,""]]),i.locals&&(e.exports=i.locals),r(346).Z("532304d4",i,!0,{})},346:function(e,t,r){"use strict";function i(e,t){for(var r=[],i={},a=0;a<t.length;a++){var s=t[a],n=s[0],o={id:e+":"+a,css:s[1],media:s[2],sourceMap:s[3]};i[n]?i[n].parts.push(o):r.push(i[n]={id:n,parts:[o]})}return r}r.d(t,{Z:function(){return g}});var a="undefined"!=typeof document;if("undefined"!=typeof DEBUG&&DEBUG&&!a)throw Error("vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.");var s={},n=a&&(document.head||document.getElementsByTagName("head")[0]),o=null,l=0,d=!1,c=function(){},p=null,m="data-vue-ssr-id",u="undefined"!=typeof navigator&&/msie [6-9]\b/.test(navigator.userAgent.toLowerCase());function g(e,t,r,a){d=r,p=a||{};var n=i(e,t);return x(n),function(t){for(var r=[],a=0;a<n.length;a++){var o=s[n[a].id];o.refs--,r.push(o)}t?x(n=i(e,t)):n=[];for(var a=0;a<r.length;a++){var o=r[a];if(0===o.refs){for(var l=0;l<o.parts.length;l++)o.parts[l]();delete s[o.id]}}}}function x(e){for(var t=0;t<e.length;t++){var r=e[t],i=s[r.id];if(i){i.refs++;for(var a=0;a<i.parts.length;a++)i.parts[a](r.parts[a]);for(;a<r.parts.length;a++)i.parts.push(f(r.parts[a]));i.parts.length>r.parts.length&&(i.parts.length=r.parts.length)}else{for(var n=[],a=0;a<r.parts.length;a++)n.push(f(r.parts[a]));s[r.id]={id:r.id,refs:1,parts:n}}}}function h(){var e=document.createElement("style");return e.type="text/css",n.appendChild(e),e}function f(e){var t,r,i=document.querySelector("style["+m+'~="'+e.id+'"]');if(i){if(d)return c;i.parentNode.removeChild(i)}if(u){var a=l++;t=v.bind(null,i=o||(o=h()),a,!1),r=v.bind(null,i,a,!0)}else t=_.bind(null,i=h()),r=function(){i.parentNode.removeChild(i)};return t(e),function(i){i?(i.css!==e.css||i.media!==e.media||i.sourceMap!==e.sourceMap)&&t(e=i):r()}}var b=function(){var e=[];return function(t,r){return e[t]=r,e.filter(Boolean).join("\n")}}();function v(e,t,r,i){var a=r?"":i.css;if(e.styleSheet)e.styleSheet.cssText=b(t,a);else{var s=document.createTextNode(a),n=e.childNodes;n[t]&&e.removeChild(n[t]),n.length?e.insertBefore(s,n[t]):e.appendChild(s)}}function _(e,t){var r=t.css,i=t.media,a=t.sourceMap;if(i&&e.setAttribute("media",i),p.ssrId&&e.setAttribute(m,t.id),a&&(r+="\n/*# sourceURL="+a.sources[0]+" */\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}}},t={};function r(i){var a=t[i];if(void 0!==a)return a.exports;var s=t[i]={id:i,exports:{}};return e[i](s,s.exports,r),s.exports}r.d=function(e,t){for(var i in t)r.o(t,i)&&!r.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="bundles/itgcotax/",window?.__sw__?.assetPath&&(r.p=window.__sw__.assetPath+"/bundles/itgcotax/"),function(){"use strict";let{Component:e}=Shopware,{Criteria:t}=Shopware.Data;e.register("sw-text-filter",{template:'\r\n{% block sw_text_filter %}\r\n    <div class="sw-existence-filter">\r\n        <sw-base-filter\r\n            :title="filter.label"\r\n            :show-reset-button="!!value"\r\n            :active="active"\r\n            @filter-reset="resetFilter"\r\n        >\r\n            \r\n            {% block sw_text_filter_content %}\r\n                <sw-text-field\r\n                    :placeholder="filter.placeholder"\r\n                    :value="value"\r\n                    @update:value="changeValue"\r\n                />\r\n            {% endblock %}\r\n        </sw-base-filter>\r\n    </div>\r\n{% endblock %}\r\n',props:{filter:{type:Object,required:!0},active:{type:Boolean,required:!0}},computed:{value(){return this.filter.value}},methods:{changeValue(e){if(!e){this.resetFilter();return}let r=this.filter.property.concat(this.filter.schema?`.${this.filter.schema.localField}`:""),i=[t.contains(r,e)];this.$emit("filter-update",this.filter.name,i,e)},resetFilter(){this.$emit("filter-reset",this.filter.name)}}}),Shopware.Component.override("sw-filter-panel",{template:'\r\n{% block sw_filter_panel_item %}\r\n    <div\r\n            v-for="filter in listFilters"\r\n            :id="filter.name"\r\n            :key="filter.name"\r\n            class="sw-filter-panel__item"\r\n    >\r\n        <div v-if="false"></div>\r\n        <sw-text-filter\r\n                v-else-if="showFilter(filter, \'text-filter\')"\r\n                :filter="filter"\r\n                :active="!!activeFilters[filter.name]"\r\n                @filter-update="updateFilter"\r\n                @filter-reset="resetFilter"\r\n        />\r\n    </div>\r\n    {% parent %}\r\n{% endblock %}\r\n'}),Shopware.Component.override("sw-order-detail-base",{template:'\r\n{% block sw_order_detail_base_line_items_summary_taxes %}\r\n    <template v-if="taxStatus !== \'tax-free\'">\r\n        <template v-for="(calculatedTax, index) in sortedCalculatedTaxes">\r\n            <dt :key="`sorted-calculated-taxes-dt-${index}`">\r\n                {{ $tc(\'sw-order.detailBase.summaryLabelTaxes\', 1, { taxRate: getTaxRate(calculatedTax.tax) }) }}\r\n            </dt>\r\n            <dd :key="`sorted-calculated-taxes-dd-${index}`">\r\n                {{ calculatedTax.tax | currency(order.currency.translated.shortName) }}\r\n            </dd>\r\n        </template>\r\n    </template>\r\n{% endblock %}\r\n',methods:{getTaxRate(e){return parseFloat(100*e/this.order.amountNet).toFixed(2)}}}),Shopware.Component.override("sw-settings-tax-detail",{template:'\r\n{% block sw_settings_tax_detail_content_card %}\r\n    {% parent %}\r\n    <div class="sw-card">\r\n        <div class="sw-card__content">\r\n            <div class="sw-container"\r\n                 style="grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 0px 30px; place-items: stretch;">\r\n                <div class="sw-field sw-block-field sw-contextual-field sw-field--text is--disabled sw-field--default">\r\n                    {% block sw_settings_tax_service_provider_card %}\r\n                        <sw-tax-provider-card\r\n                            v-if="tax.id"\r\n                            :disabled="!taxId"\r\n                            class="sw-settings-tax-detail__tax-rule-grid"\r\n                            :tax="tax"\r\n                            :is-loading="isLoading"\r\n                        />\r\n                    {% endblock %}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div></div>\r\n    </div>\r\n{% endblock %}\r\n'}),r(335);let{Component:i,Context:a}=Shopware,{Criteria:s}=Shopware.Data;i.register("sw-tax-provider-card",{template:'\r\n{% block sw_settings_tax_provider_card %}\r\n    <sw-container\r\n        columns="1fr 1fr"\r\n        gap="0px 32px"\r\n    >\r\n        \r\n        {% block sw_settings_tax_provider_card_type_select %}\r\n            <sw-entity-single-select\r\n                v-model:value="taxProvider.id"\r\n                show-clearable-button\r\n                :label="$tc(\'sw-override-settings-tax.taxProvider.cardTitle\')"\r\n                label-property="name"\r\n                :criteria="taxProviderCriteria"\r\n                entity="itg_tax_service_provider"\r\n                @update:value="changeTaxProvider"\r\n            />\r\n        {% endblock %}\r\n    </sw-container>\r\n{% endblock %}\r\n',inject:["repositoryFactory"],props:{tax:{type:Object,required:!0}},data(){return{taxProvider:null,currentTaxProvider:null}},computed:{taxRepository(){return this.repositoryFactory.create("tax")},taxProviderRepository(){return this.repositoryFactory.create("itg_tax_service_provider")},taxMappingRepository(){return this.repositoryFactory.create("itg_tax_provider")},taxProviderCriteria(){return new s}},created(){this.createdComponent()},methods:{changeTaxProvider(e){this.taxProviderRepository.get(e,a.api).then(e=>{this.currentTaxProvider=e,this.currentTaxProvider?(this.taxExtension=this.taxMappingRepository.create(Shopware.Context.api),this.tax.extensions.taxExtension?(this.taxExtension.taxId=this.tax.id,this.taxExtension.providerId=this.currentTaxProvider.id,this.taxMappingRepository.delete(this.tax.extensions.taxExtension.id).then(()=>{})):(this.taxExtension.taxId=this.tax.id,this.taxExtension.providerId=this.currentTaxProvider.id),this.taxMappingRepository.save(this.taxExtension).then(()=>{})):this.taxMappingRepository.delete(this.tax.extensions.taxExtension.id,a.api).then(()=>{})})},createdComponent(){this.currentTaxProvider?(this.taxProvider=this.currentTaxProvider,this.taxProvider.id&&this.changeTaxProvider(this.taxProvider.id)):(this.taxProvider=this.taxProviderRepository.create(),this.taxProvider.taxId=this.tax.id,this.tax.extensions.taxExtension&&(this.taxProvider.id=this.tax.extensions.taxExtension.providerId))}}});let{Component:n,Mixin:o}=Shopware;n.register("sw-settings-taxjar",{template:'\r\n{% block sw_settings_taxjar_index %}\r\n    <sw-page class="sw-settings-taxjar">\r\n\r\n        \r\n        {% block sw_settings_taxjar_search_bar %}\r\n            <template #search-bar>\r\n                <sw-search-bar />\r\n            </template>\r\n        {% endblock %}\r\n\r\n        \r\n        {% block sw_settings_taxjar_smart_bar_header %}\r\n            <template #smart-bar-header>\r\n                \r\n                {% block sw_settings_taxjar_smart_bar_header_title %}\r\n                    <h2>\r\n                        \r\n                        {% block sw_settings_taxjar_smart_bar_header_title_text %}\r\n                            {{ $tc(\'sw-settings.index.title\') }}\r\n                            <sw-icon\r\n                                    name="regular-chevron-right-xs"\r\n                                    small\r\n                            />\r\n                            {{ $tc(\'sw-settings-taxjar.general.textHeadline\') }}\r\n                        {% endblock %}\r\n                    </h2>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n        \r\n        {% block sw_settings_taxjar_smart_bar_actions %}\r\n            <template #smart-bar-actions>\r\n                \r\n                {% block sw_settings_tax_actions_save %}\r\n                    <sw-button-process\r\n                            class="sw-settings-login-registration__save-action"\r\n                            :is-loading="isLoading || systemConfigLoading"\r\n                            :process-success="isSaveSuccessful"\r\n                            :disabled="isLoading || systemConfigLoading"\r\n                            variant="primary"\r\n                            @update:process-success="saveFinish"\r\n                            @click="onSave"\r\n                    >\r\n                        {{ $tc(\'sw-settings-taxjar.general.buttonSave\') }}\r\n                    </sw-button-process>\r\n                {% endblock %}\r\n                \r\n                {% block sw_settings_tax_actions_log %}\r\n                    <sw-button\r\n                            class="sw-settings-tax__log-action"\r\n                            variant="primary"\r\n                            :is-loading="isLoading"\r\n                            :disabled="isLoading"\r\n                            :router-link="{ name: \'sw.tax.log.module.list\' }"\r\n                    >\r\n                        {{ $tc(\'sw-settings-taxjar.general.buttonLog\') }}\r\n                    </sw-button>\r\n                {% endblock %}\r\n\r\n                \r\n                {% block sw_settings_test_tax_jar_connection %}\r\n                    <sw-button\r\n                            class="sw-settings-tax-connection__test-action"\r\n                            variant="primary"\r\n                            :is-loading="isLoading"\r\n                            :disabled="isLoading"\r\n                            @click="testConnection"\r\n                    >\r\n                        {{ $tc(\'sw-settings-taxjar.general.testButtonLabel\') }}\r\n                    </sw-button>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n\r\n\r\n        \r\n        {% block sw_settings_taxjar_content %}\r\n            <template #content>\r\n                <sw-card-view>\r\n                    <sw-skeleton v-if="isLoading" />\r\n                    <sw-system-config\r\n                            v-show="!isLoading"\r\n                            ref="systemConfig"\r\n                            sales-channel-switchable\r\n                            domain="ITGCoTax.setting"\r\n                            @loading-changed="onLoadingChanged"\r\n                    />\r\n                </sw-card-view>\r\n            </template>\r\n        {% endblock %}\r\n    </sw-page>\r\n{% endblock %}\r\n',mixins:[o.getByName("notification")],data(){return{isLoading:!1,isSaveSuccessful:!1}},metaInfo(){return{title:this.$createTitle()}},methods:{saveFinish(){this.isSaveSuccessful=!1},basicHeaders(){return{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Service("loginService").getToken()}`}},testConnection(){let e=this.$refs.systemConfig.actualConfigData[null],t=Shopware.Context.api.basePath,r=e["ITGCoTax.setting.liveApiToken"];e["ITGCoTax.setting.sandboxMode"]&&(r=e["ITGCoTax.setting.sandboxApiToken"]);let i=JSON.stringify({token:r,sandbox:e["ITGCoTax.setting.sandboxMode"],from_country:e["ITGCoTax.setting.shippingFromCountry"],from_zip:e["ITGCoTax.setting.shippingFromZip"],from_state:e["ITGCoTax.setting.shippingFromState"],from_city:e["ITGCoTax.setting.shippingFromCity"],from_street:e["ITGCoTax.setting.shippingFromStreet"]}),a={method:"POST",headers:this.basicHeaders(),body:i,redirect:"follow"};fetch(t+"/api/_action/tax-jar/test-connection",a).then(e=>e.json()).then(e=>{try{if(e.error){let t=e.detail;(t=t.replace(/from_street/g,"Shipping From Street").replace(/from_country/g,"Shipping From Country").replace(/from_zip/g,"Shipping From ZipCode").replace(/from_state/g,"Shipping From State Code").replace(/from_city/g,"Shipping From City")).includes("Shipping From State Code")&&(t+=".Please provide valid Shipping From State Code Ex: WI for Wisconsin!"),this.createNotificationError({message:t})}else this.createNotificationSuccess({message:this.$tc("sw-settings-taxjar.testConnection.success")})}catch(e){this.createNotificationError({message:e})}}).catch(e=>{this.createNotificationError({message:e+".Please review logs for more detail!"})})},validateInput(){let e=this.$refs.systemConfig.actualConfigData[null],t=!1;return e["ITGCoTax.setting.sandboxMode"]?e["ITGCoTax.setting.sandboxApiToken"]||(this.createNotificationError({message:"Provide Valid Sandbox API Token"}),t=!0):e["ITGCoTax.setting.liveApiToken"]||(this.createNotificationError({message:"Provide Valid Live API Token"}),t=!0),e["ITGCoTax.setting.defaultProductTaxCode"]||(this.createNotificationError({message:"Provide Valid Product Tax Code"}),t=!0),e["ITGCoTax.setting.shippingFromStreet"]||(this.createNotificationError({message:"Provide Valid Shipping From Street"}),t=!0),e["ITGCoTax.setting.shippingFromCity"]||(this.createNotificationError({message:"Provide Valid Shipping From City"}),t=!0),e["ITGCoTax.setting.shippingFromZip"]||(this.createNotificationError({message:"Provide Valid Shipping From Zip"}),t=!0),e["ITGCoTax.setting.shippingFromState"]?e["ITGCoTax.setting.shippingFromState"].length>3&&(this.createNotificationError({message:"Provide Valid Shipping From State Code Ex: WI For Wisconsin"}),t=!0):(this.createNotificationError({message:"Provide Valid Shipping From State Code"}),t=!0),e["ITGCoTax.setting.shippingFromCountry"]||(this.createNotificationError({message:"Provide Valid Shipping From Country"}),t=!0),!t},onSave(){if(this.isSaveSuccessful=!1,!this.validateInput()){this.isLoading=!1;return}this.isLoading=!0,this.$refs.systemConfig.saveAll().then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0}).catch(e=>{this.isLoading=!1,this.createNotificationError({message:e})})},onLoadingChanged(e){this.isLoading=e}}});let{Module:l}=Shopware;l.register("sw-settings-taxjar",{type:"core",name:"settings-taxjar",title:"Tax service provider settings",description:"Tax service provider settings",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"regular-cog",favicon:"icon-module-settings.png",routes:{index:{component:"sw-settings-taxjar",path:"index",meta:{parentPath:"sw.settings.index",privilege:"system.system_config"}}},settingsItem:{group:"shop",to:"sw.settings.taxjar.index",icon:"regular-briefcase",privilege:"system.system_config"}});let{Component:d,Mixin:c}=Shopware,{Criteria:p}=Shopware.Data;d.register("sw-tax-log-module-list",{template:'\r\n{% block tax_jar_log_module_list %}\r\n    <sw-page>\r\n        \r\n        {% block tax_jar_log_smart_bar_header %}\r\n            <template #smart-bar-header>\r\n                \r\n                {% block tax_jar_log_list_smart_bar_header_title %}\r\n                    <h2>\r\n                        \r\n                        {% block emizen_module_list_smart_bar_header_title_text %}\r\n                            {{ $tc(\'sw-settings.index.title\') }}\r\n                            <sw-icon name="small-arrow-medium-right" small></sw-icon>\r\n                            {{ $t(\'sw-tax-log-module.general.mainMenuItemList\') }}\r\n                        {% endblock %}\r\n\r\n                        \r\n                        {% block emizen_module_list_smart_bar_header_amount %}\r\n                            <span v-if="total" class="sw-page__smart-bar-amount">\r\n                                ({{total}})\r\n                            </span>\r\n                        {% endblock %}\r\n                    </h2>\r\n                {% endblock %}\r\n            </template>\r\n        {% endblock %}\r\n        <template #smart-bar-actions>\r\n            \r\n            {% block sw_settings_test_tax_jar_connection %}\r\n                <sw-button\r\n                    class="sw-settings-tax-connection__test-action"\r\n                    variant="primary"\r\n                    :is-loading="isLoading"\r\n                    :disabled="isLoading"\r\n                    @click="exportLog"\r\n                >\r\n                    {{ $tc(\'sw-tax-log-module.export.buttonLabel\') }}\r\n                </sw-button>\r\n            {% endblock %}\r\n        </template>\r\n        <template #content>\r\n            <sw-entity-listing\r\n                :items="taxJarLogCollection"\r\n                :repository="getRepository"\r\n                :showSelection="false"\r\n                :columns="getColumns">\r\n                <template slot="column-request" slot-scope="{ item }">\r\n                    {{item.request}}\r\n                </template>\r\n                <template slot="column-response" slot-scope="{ item }">\r\n                    {{item.response}}\r\n                </template>\r\n            </sw-entity-listing>\r\n        </template>\r\n\r\n        \r\n        {% block wk_test_list_sidebar %}\r\n            <template #sidebar>\r\n                <sw-sidebar class="sw-order-list__sidebar">\r\n                    \r\n                    {% block tax_jar_log_list_sidebar_refresh %}\r\n                        <sw-sidebar-item\r\n                            icon="regular-undo"\r\n                            :title="$tc(\'sw-order.list.titleSidebarItemRefresh\')"\r\n                            @click="onRefresh">\r\n                        </sw-sidebar-item>\r\n                    {% endblock %}\r\n\r\n                    \r\n                    {% block tax_jar_log_list_sidebar_filter %}\r\n                        <sw-sidebar-filter-panel\r\n                            entity="taxjar_log"\r\n                            :storeKey="storeKey"\r\n                            :filters="listFilters"\r\n                            :defaults="defaultFilters"\r\n                            :activeFilterNumber="activeFilterNumber"\r\n                            @criteria-changed="updateCriteria">\r\n                        </sw-sidebar-filter-panel>\r\n                    {% endblock %}\r\n                </sw-sidebar>\r\n            </template>\r\n        {% endblock %}\r\n    </sw-page>\r\n{% endblock %}\r\n',inject:["repositoryFactory","filterFactory"],mixins:[c.getByName("notification"),c.getByName("listing"),c.getByName("placeholder")],metaInfo(){return{title:this.$createTitle()}},data(){return{total:0,page:1,limit:30,taxJarLogCollection:null,storeKey:"grid.filter.tax.log",repository:null,isLoading:!1,processSuccess:!1,defaultFilters:["tax-log-date-filter","tax-log-type-filter","tax-log-order-number-filter","tax-log-customer-name-filter","tax-log-customer-email-filter","tax-log-customer-ip-filter","tax-log-request-filter","tax-log-response-filter"],activeFilterNumber:0,filterCriteria:[]}},created(){},computed:{getRepository(){return this.repositoryFactory.create("itg_taxjar_log")},getColumns(){return this.getColumnsList()},listFilters(){return this.filterFactory.create("itg_taxjar_log",{"tax-log-date-filter":{property:"createdAt",dateType:"datetime-local",label:"Creation Time",placeholder:"Creation Time",showTimeframe:!0},"tax-log-type-filter":{property:"type",label:"Request Type",type:"text-filter",placeholder:"Request Type"},"tax-log-order-number-filter":{property:"orderNumber",label:"Order Number",type:"text-filter",placeholder:"Order Number"},"tax-log-customer-name-filter":{property:"customerName",label:"Customer Name",type:"text-filter",placeholder:"Customer Name"},"tax-log-customer-email-filter":{property:"customerEmail",label:"Customer Email",type:"text-filter",placeholder:"Customer Email"},"tax-log-customer-ip-filter":{property:"remoteIp",label:"Customer IP",type:"text-filter",placeholder:"Customer IP"},"tax-log-request-filter":{property:"request",label:"Request",type:"text-filter",placeholder:"Request"},"tax-log-response-filter":{property:"response",type:"text-filter",label:"Response",placeholder:"Response"}})},defaultCriteria(){let e=new p(this.page,this.limit);return e.setTerm(this.term),e.addSorting(p.sort("createdAt","DESC")),this.filterCriteria.forEach(t=>{e.addFilter(t)}),e}},watch:{defaultCriteria:{handler(){this.getList()},deep:!0}},methods:{basicHeaders(){return{"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${Shopware.Service("loginService").getToken()}`}},exportLog(){let e={method:"GET",headers:this.basicHeaders(),redirect:"follow"},t=Shopware.Context.api.basePath;fetch(t+"/api/_action/tax-jar/export-log",e).then(e=>e.json()).then(e=>{let t="Customer Name,Customer Email,Customer IP,Request,Response,Creation Time\n";e.forEach(e=>{t+='"'+e.customerName+'","'+e.customerEmail+'","'+e.remoteIp+'","'+e.request+'","'+e.response+'",'+e.createdAt+"\n"});let r=document.createElement("a");r.href="data:text/csv;charset=utf-8,"+encodeURIComponent(t),r.target="_blank",r.download="ExportTaxJarLog.csv",r.click()}).catch(e=>{this.createNotificationError({message:e+".Please review logs for more detail!"})})},async getList(){this.isLoading=!0;let e=await Shopware.Service("filterService").mergeWithStoredFilters(this.storeKey,this.defaultCriteria);this.activeFilterNumber=e.filters.length;try{let e=await this.getRepository.search(this.defaultCriteria);this.total=e.total,this.taxJarLogCollection=e,this.isLoading=!1,this.selection={}}catch{this.isLoading=!1}},updateCriteria(e){this.page=1,this.filterCriteria=e},getColumnsList(){return[{property:"createdAt",dataIndex:"createdAt",label:"Creation Time",allowResize:!0,sortable:!0},{property:"type",dataIndex:"type",label:this.$t("sw-tax-log-module.list.requestType"),allowResize:!0,sortable:!0},{property:"orderNumber",dataIndex:"orderNumber",label:this.$t("sw-tax-log-module.list.orderNumber"),allowResize:!0,sortable:!0},{property:"customerName",dataIndex:"customerName",label:this.$t("sw-tax-log-module.list.customerName"),allowResize:!0,sortable:!0},{property:"customerEmail",dataIndex:"customerEmail",label:this.$t("sw-tax-log-module.list.customerEmail"),allowResize:!0,sortable:!0},{property:"remoteIp",dataIndex:"remoteIp",label:this.$t("sw-tax-log-module.list.remoteIp"),allowResize:!0,sortable:!0},{property:"request",dataIndex:"request",label:this.$t("sw-tax-log-module.list.titleColumn"),allowResize:!0,sortable:!0},{property:"response",dataIndex:"response",label:this.$t("sw-tax-log-module.list.descColumn"),allowResize:!0,sortable:!0}]}}});var m=JSON.parse('{"sw-tax-log-module":{"general":{"mainMenuItemList":"Tax Jar Log","descriptionTextModule":"Tax Jar Log"},"list":{"titleColumn":"Request","customerName":"Customer Name","requestType":"Request Type","orderNumber":"Order Number","customerEmail":"Customer Email","remoteIp":"Customer IP","descColumn":"Response","titleSaveSuccess":"Save","messageSaveSuccess":"Tax Log Saved Successfully"},"export":{"buttonLabel":"Export Log"}}}'),u=JSON.parse('{"sw-tax-log-module":{"general":{"mainMenuItemList":"Tax Jar Log","descriptionTextModule":"Tax Jar Log"},"list":{"titleColumn":"Request","customerName":"Customer Name","requestType":"Request Type","orderNumber":"Order Number","customerEmail":"Customer Email","remoteIp":"Customer IP","descColumn":"Response","titleSaveSuccess":"Save","messageSaveSuccess":"Tax Log Saved Successfully"},"export":{"buttonLabel":"Export Log"}}}');let{Module:g}=Shopware;g.register("sw-tax-log-module",{type:"plugin",title:"sw-tax-log-module.general.mainMenuItemList",description:"sw-tax-log-module.general.descriptionTextModule",snippets:{"en-GB":m,"de-De":u},routes:{list:{component:"sw-tax-log-module-list",path:"list",meta:{parentPath:"sw.settings.index"}}},settingsItem:[{name:"sw-tax-log-module-menu",label:"sw-tax-log-module.general.mainMenuItemList",to:"sw.tax.log.module.list",group:"plugins",icon:"regular-cog"}],navigation:[{id:"sw-tax-jar-log",label:"sw-tax-log-module.general.mainMenuItemList",color:"#ff68b4",icon:"regular-cog",path:"sw.tax.log.module.list",position:100,parent:"sw-order",privilege:"order.viewer"}]})}()})();